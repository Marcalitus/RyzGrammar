/* Generated By:JavaCC: Do not edit this line. RyzGrammar.java */
         package ryzgram;

        public class RyzGrammar implements RyzGrammarConstants {
        static public S1SymTab st = new S1SymTab();
         public static void main(String args [])

         throws ParseException   {

         RyzGrammar compiler = new RyzGrammar(System.in);

         compiler.program();    }

  static final public void program() throws ParseException {
        System.out.print("Please enter a program name");
        System.out.print("");
    jj_consume_token(PROGRAMSY);
    jj_consume_token(ID);
    jj_consume_token(16);
    Declarations();
    StatementList();
    jj_consume_token(ENDSY);
  }

  static final public void Declarations() throws ParseException {
  System.out.println("Please enter the declarations");
  System.out.println("");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARSY:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(VARSY);
      jj_consume_token(ID);
      jj_consume_token(16);
    }
  }

  static final public void StatementList() throws ParseException {
  System.out.println("Please enter the Statment List");
  System.out.println("");
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case IFSY:
      case WHILESY:
      case PRINTSY:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Statement();
      jj_consume_token(16);
    }
  }

  static final public void Statement() throws ParseException {
          System.out.println("Please enter a statement");
          System.out.println("");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Assignement();
      break;
    case IFSY:
      IfStatement();
      break;
    case WHILESY:
      WhileStatement();
      break;
    case PRINTSY:
      PrintStatement();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Assignement() throws ParseException {
          System.out.println("Please enter an assignment statment");
          System.out.println("");
    jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    ExpressionList();
    jj_consume_token(16);
                          System.out.println("MVC 10000, B");
                          System.out.println("STR B,A");
                          System.out.println("");
  }

  static final public void IfStatement() throws ParseException {
    jj_consume_token(IFSY);
    Condition();
    jj_consume_token(17);
    StatementList();
    jj_consume_token(18);
    jj_consume_token(THENSY);
    jj_consume_token(17);
    StatementList();
    jj_consume_token(18);
    jj_consume_token(ELSESY);
    jj_consume_token(17);
    StatementList();
    jj_consume_token(18);
  }

  static final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILESY);
    Condition();
    jj_consume_token(19);
    StatementList();
    jj_consume_token(20);
  }

  static final public void Condition() throws ParseException {
    jj_consume_token(21);
    simplexp();
    rel();
    simplexp();
    jj_consume_token(22);
  }

  static final public void rel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      jj_consume_token(23);
      break;
    case 24:
      jj_consume_token(24);
      break;
    case 25:
      jj_consume_token(25);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void simplexp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void PrintStatement() throws ParseException {
    jj_consume_token(PRINTSY);
    jj_consume_token(21);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(22);
  }

  static final public void ExpressionList() throws ParseException {
    String s;

    s = Expression();
      System.out.println("********Postfixed********");
      System.out.println(s);
      char ch;
      System.out.println("*********************");
      for (int i=0;i<s.length();i++)
    {
     ch=s.charAt(i);
     if (ch=='*')
     System.out.println("MUL");
     else if (ch=='+')System.out.println("ADD");
     else System.out.println("PUSH "+ch);
    }
    System.out.println("*********************");
    System.out.println("CODE GENERATION FOR MICRO-ASSEMBLER");
    System.out.println("MVC 10000,D");
    for (int i=0;i<s.length();i++)
    {
     ch=s.charAt(i);
     if (ch=='+')
     { System.out.println("LDR  D,A");
       System.out.println("ADC  -1,D");
       System.out.println("ADR  D,A");
       System.out.println("STR  D,A");
     }
     else if (ch=='*')
     { System.out.println("LDR  D,A");
       System.out.println("ADC -1,D");
       System.out.println("MLR  D,A");
       System.out.println("STR  D,A");}
     else { System.out.println("ADC "+"1"+",D");
       System.out.println("LDC "+ch+",D");
     }
    }

      //System.out.println("");
 //System.out.println("Please type in another expression followed by a \";\" or ^D to quit:");
  //System.out.println("");

  }

/** An Expression. */
  static final public String Expression() throws ParseException {
    java.util.Vector termimage = new java.util.Vector();
    String s;
    s = Term();
      termimage.addElement(s);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(26);
      s = Term();
      termimage.addElement(s);
    }
      if (termimage.size() == 1) {
        {if (true) return (String)termimage.elementAt(0);}
          } else {
            s =  (String)termimage.elementAt(0);
        for (int i = 1; i < termimage.size()-1; i++) {
          s += "" + (String)termimage.elementAt(i);
        }
        if (termimage.size() > 2) {
          s += "";

        s += "+" + (String)termimage.elementAt(termimage.size()-1);
for (int i = 1; i < termimage.size()-1; i++) {
         s += "+" ;
       } }else s=s+((String)termimage.elementAt(1))+"+";
            {if (true) return s;}
          }
    throw new Error("Missing return statement in function");
  }

/** A Term. */
  static final public String Term() throws ParseException {
    java.util.Vector factorimage = new java.util.Vector();
    String s;
    s = Factor();
      factorimage.addElement(s);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(27);
      s = Factor();
      factorimage.addElement(s);
    }
      if (factorimage.size() == 1) {
        {if (true) return (String)factorimage.elementAt(0);}
          } else {
            s = (String)factorimage.elementAt(0);
        for (int i = 1; i < factorimage.size()-1; i++) {
          s += (String)factorimage.elementAt(i);
        }
        if (factorimage.size() > 2) {
        s += (String)factorimage.elementAt(factorimage.size()-1);
for (int i = 1; i < factorimage.size(); i++) {
          s += "*" ;
        } } else s=s+(String)factorimage.elementAt(1)+"*";
            {if (true) return s;}
          }
    throw new Error("Missing return statement in function");
  }

/** A Factor. */
  static final public String Factor() throws ParseException {
    Token t;
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      {if (true) return t.image;}
      break;
    case NUM:
      t = jj_consume_token(NUM);
      {if (true) return t.image;}
      break;
    case 21:
      jj_consume_token(21);
      s = Expression();
      jj_consume_token(22);
      {if (true) return s;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public RyzGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x8520,0x8520,0x3800000,0x60,0x60,0x4000000,0x8000000,0x200060,};
   }

  /** Constructor with InputStream. */
  public RyzGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RyzGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RyzGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RyzGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RyzGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RyzGrammar(RyzGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RyzGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
