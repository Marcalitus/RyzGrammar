	void Statement(): 
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+ 
 */ options {   static = true; }

 PARSER_BEGIN(RyzGrammar)

 
package ryzgram;
import java.io.*;
import java.util.*;
	
	public class RyzGrammar {
//building the output file arguments

//	String outFileName = args[0] = ".ua";
//	PrintWriter outFile = new PrintWriter(outFileName);
//
//
//	outFile.println("; from JavaCC written by Mohammed Abdulrahman ");
	//No idea what is causing this to make an error therefore I will comment everything else.

//----------------------------------------
	static PrintWriter output = null;
	static public S1SymTab symt = new S1SymTab();
	static public Token t = new Token();
	static public S1CodeGen cg = new S1CodeGen(output, symt);
	 public static void main(String args [])
	  
	 throws ParseException
	 {
	  	
	 RyzGrammar compiler = new RyzGrammar(System.in);


	 compiler.program();    }
	
}
	
	PARSER_END(RyzGrammar)
	
	SKIP :
	{    
	  " "
	| "\t" 
	| "\n"
	| "\r"
	}    
	 
	
	TOKEN :
	{
	  < ID: ["A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
	|
	  < NUM: ( ["0"-"9"] )+ >
	| < ASSIGN: "=" >
	| < IFSY:"if" >
	| < ELSESY:"else" >
	| < WHILESY:"while " >
	| < THENSY:"then" >
	| < PROGRAMSY:"program" >
	| < ENDSY:"end" > 
	| < VARSY:"var" > 
	| < PRINTSY:"print" > 
	  
	}
  
void program():
{  	System.out.print("Please enter a program name\n");

}
{
	  
	( < PROGRAMSY > < ID > ";"
	Declarations() StatementList()
	< ENDSY >
	)
}

void Declarations():
{ 
  System.out.println("Please enter the declarations\n");
  System.out.println("");
  
}
{
  
  (
    < VARSY >
	t =   < ID > 
	{
  	int size = symt.getSize();
  	symt.enter(t.image);
  	if (size == symt.getSize()) {
  	  System.out.println("This variable is already in the symbol table, please try another variable.");
  	}

 
  }
   	";"
   )* 
  
}

void StatementList():
{
  System.out.println("Please enter the Statment List");
  System.out.println("");
}
{
  (
    Statement() ";"
  )*
}

/** 
	{
	  System.out.println("Please enter a statement");
	  System.out.println("");
	}
	{
	(
	  Assignement()
	| IfStatement()
	| WhileStatement()
	| PrintStatement()  
	  )
	}

	
void Assignement(): 
	{
	  System.out.println("Please enter an Assignement statment");
	  System.out.println("");
	}
	 {
	
		
		  t= < ID > 
			{
			  int size = symt.getSize();
			  int order = symt.enter(t.image);
			  
			  if (size == order)
			  {
				System.out.println(t.image + " is not in the Symbol Table");
			  }
			  int memory = order + 10000;
			  cg.emitInstruction("MVC " + memory + " ,B");
			  cg.emitInstruction("STR B,A" + "\n");
//			  System.out.println("MVC 10000, B");
//			  System.out.println("STR B,A");
//			  System.out.println("");
			}

		"=" Expression() 
		
	
	}
	
	

void IfStatement():
{ }
{

	(
	< IFSY > Condition()
	"{" StatementList() "}"
	< THENSY >
	"{" StatementList() "}"	
	 < ELSESY >
	  "{" StatementList() "}"
	)
}
void WhileStatement():
{ }
{
	< WHILESY > Condition()
	" { " StatementList() " }"
}

void Condition():
{ }
{
  "(" simplexp() rel() simplexp() ")"
 
}
	
	
void rel():
{ }
{

  "<"
| "=="
| ">"
}

	void simplexp():
	{ }
	{
	  
		< ID > | < NUM >
	}
	
	void PrintStatement():
	{ }
	{ 
	  < PRINTSY > "(" ( < ID > | < NUM > ) ")" 
	}
 

/** An Expression. */
void Expression() :
{ }
 {
   Term()

(
  "+" Term()
  {
     System.out.println("LDR  D,A");
       System.out.println("ADC  -1,D"); 
		System.out.println("LDR D, B"); 
       System.out.println("ADR  B,A");
       System.out.println("STR  D,A");
    }
|  
//ldr b,a | adc -1, b | ldr b,c| adr c,a | str b,a 
"-" Term()
	{
		System.out.println("LDR  D,A");
		System.out.println("MLC -1,A");
		System.out.println("ADC  -1,D"); 
		System.out.println("LDR D, B"); 		
       System.out.println("ADR  B,A");
       System.out.println("STR  D,A");
    }
)*
}
   
// for - | ldr b,a | mlc -1,a | adc -1, b | ldr b,c | adr c,a| str b,a



void Term():
{ }

{
  // B = D | A = A | 
 (
    
	  "*" Factor()
  {
	System.out.println("LDR  D,A");
	System.out.println("ADC  -1,D"); 
	System.out.println("LDR D, C");
	System.out.println("MLR C, A");
	System.out.println("STR  D,A");
    }
|  
// ldr b,a | adc -1, b | ldr b,c |  mlr b | str b,a
	"/" Factor()
	  {
     System.out.println("LDR  D,A");
       System.out.println("ADC  -1,D"); 
		System.out.println("LDR D, C");
		System.out.println("DVR C, A");
       System.out.println("STR  D,A");
    }
)*

}



 

/** A Term. */
 

/** A Factor. */
void Factor() :
{
   
}
{
  t=<ID>
    {
      int Size = symt.getSize();
      int Order = symt.enter(t.image);
      if (symt.getSize() > Size)
      {
        System.out.println(t.image + "This variable is not in the symbol table or was defined before");
      }
      int memory = order + 10000;
      System.out.println("LDC " + memory + " ,A");
      System.out.println("ADC 1, D");
	  System.out.println("STR D, A");
		
    } 
|
  t=<NUM>
  {
    
    System.out.println("MVC " + t.image + " ,A");
    System.out.println("ADC 1,D");
    System.out.println("STR D,A");

 }
|
  "(" t=Expression() ")"
    }
	